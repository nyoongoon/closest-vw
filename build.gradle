plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.4'
    id 'io.spring.dependency-management' version '1.1.6'
    id "org.openapi.generator" version "7.7.0"
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-security:3.4.0'
    implementation 'org.springframework.boot:spring-boot-starter-cache:3.4.0'
    /* p6spy */
    implementation 'com.github.gavlyukovskiy:p6spy-spring-boot-starter:1.9.0'

    /* utils */
    implementation 'org.apache.commons:commons-lang3:3.17.0'

    /* validation */
    implementation 'org.springframework.boot:spring-boot-starter-validation:3.3.5'

    /* rss */
    implementation 'com.rometools:rome:2.1.0'

    /* querydsl */
    implementation 'com.querydsl:querydsl-core:5.0.0'
    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
    annotationProcessor "com.querydsl:querydsl-apt:5.0.0:jakarta"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"

    /* DB */
    runtimeOnly 'com.h2database:h2'

    /* test */
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'org.assertj:assertj-core'

    /* mock server */
    testImplementation("org.mock-server:mockserver-client-java:5.15.0")
    testImplementation("org.mock-server:mockserver-netty:5.15.0")

    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    /* open api*/
    implementation('org.openapitools:openapi-generator:7.7.0') {
        exclude group: 'org.slf4j', module: 'slf4j-simple'
    }
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.6.0'
}
openApiGenerate {
    generatorName = "spring"
    inputSpec = "${projectDir}/src/main/api-spec/closest-api.yml"
    outputDir = "${projectDir}/src/main"
    configFile = "${projectDir}/src/main/api-spec/config.json"
    configOptions = [
            "dateLibrary"          : "java8-localdatetime",
            "useSpringBoot3"       : "true",
            "openApiNullable"      : "false",
            "sourceFolder"         : "openapi-generated",
            "interfaceOnly"        : "true",
            "useBeanValidation"    : "true",
            "performBeanValidation": "true",
    ]
}

tasks.named("openApiGenerate") {

    it ->
        it.doFirst {
            delete("${projectDir}/src/main/openapi-generated")
        }

        it.doLast {
            delete("${projectDir}/src/main/pom.xml")
            delete("${projectDir}/src/main/README.md")
            delete("${projectDir}/src/main/.openapi-generator-ignore")
            delete("${projectDir}/src/main/.openapi-generator")
        }
}

tasks.named('compileJava') {
    it -> it.dependsOn(tasks.named('openApiGenerate'))
}

tasks.named('processResources') {
    it -> it.dependsOn(tasks.named('openApiGenerate'))
}

sourceSets {
    main {
        java {
            srcDirs = ['src/main/java', 'src/main/openapi-generated']
        }
    }
}

tasks.named('test') {
    useJUnitPlatform()
}
